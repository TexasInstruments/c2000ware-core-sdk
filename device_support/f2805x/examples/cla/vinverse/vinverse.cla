//###########################################################################
// Description:
//
// Task 1: calculates the element-wise inverse of a vector
// Task 2: calculates the element-wise inverse of a vector
//         and saves the result in the same vector
//
//###########################################################################
// $TI Release:  $
// $Release Date:  $
// $Copyright:
// Copyright (C) 2012-2025 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//   Redistributions of source code must retain the above copyright 
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the 
//   documentation and/or other materials provided with the   
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//###########################################################################

//
// Included Files
//
#include "DSP28x_Project.h"

//
// Include the test header file whose name is based on the test name
// which is defined by the macro TEST on the command line
//
#include XSTRINGIZE(XCONCAT(TEST_NAME, _shared.h))

//
// Task 1 : divide each element into 1
//
__interrupt void Cla1Task1 (void)
{
  int32 index;
  //
  // Copy the vector to cla to cpu message RAM
  //
  for(index=0; index < LENGTH1; index++)
  {
     vector1_inverse[index] = vector1[index];
  }
   for(index = LENGTH1 - 1; index >= 0 ; index--)
   {
       vector1_inverse[index] = 1.0/vector1[index];
   }
}

//
// Task 2 : Same as Task 1 except the input vector is the output vector
//          (data RAM instead of message RAM)
//
__interrupt void Cla1Task2 (void)
{
  int32 index;
   for(index = LENGTH2 - 1; index >= 0 ; index--)
   {
       vector2[index] = 1.0/vector2[index];
   }
}
__interrupt void Cla1Task3 (void)
{

}
__interrupt void Cla1Task4 (void)
{

}
__interrupt void Cla1Task5 (void)
{

}
__interrupt void Cla1Task6 (void)
{

}
__interrupt void Cla1Task7 (void)
{

}
__interrupt void Cla1Task8 (void)
{

}

