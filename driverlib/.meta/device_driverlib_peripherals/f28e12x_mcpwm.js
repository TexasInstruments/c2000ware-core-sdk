let MCPWM_TimeBaseCountMode = [
	{ name: "MCPWM_COUNTER_MODE_UP", displayName: "Up - count mode" },
	{ name: "MCPWM_COUNTER_MODE_UP_DOWN", displayName: "Up - down - count mode" },
	{ name: "MCPWM_COUNTER_MODE_STOP_FREEZE", displayName: "Stop - Freeze counter" },
]
let MCPWM_ClockDivider = [
	{ name: "MCPWM_CLOCK_DIVIDER_1", displayName: "Divide clock by 1" },
	{ name: "MCPWM_CLOCK_DIVIDER_2", displayName: "Divide clock by 2" },
	{ name: "MCPWM_CLOCK_DIVIDER_4", displayName: "Divide clock by 4" },
	{ name: "MCPWM_CLOCK_DIVIDER_8", displayName: "Divide clock by 8" },
	{ name: "MCPWM_CLOCK_DIVIDER_16", displayName: "Divide clock by 16" },
	{ name: "MCPWM_CLOCK_DIVIDER_32", displayName: "Divide clock by 32" },
	{ name: "MCPWM_CLOCK_DIVIDER_64", displayName: "Divide clock by 64" },
	{ name: "MCPWM_CLOCK_DIVIDER_128", displayName: "Divide clock by 128" },
	{ name: "MCPWM_CLOCK_DIVIDER_256", displayName: "Divide clock by 256" },
	{ name: "MCPWM_CLOCK_DIVIDER_512", displayName: "Divide clock by 512" },
	{ name: "MCPWM_CLOCK_DIVIDER_1024", displayName: "Divide clock by 1024" },
	{ name: "MCPWM_CLOCK_DIVIDER_2048", displayName: "Divide clock by 2048" },
	{ name: "MCPWM_CLOCK_DIVIDER_4096", displayName: "Divide clock by 4096" },
	{ name: "MCPWM_CLOCK_DIVIDER_8192", displayName: "Divide clock by 8192" },
	{ name: "MCPWM_CLOCK_DIVIDER_16384", displayName: "Divide clock by 16384" },
	{ name: "MCPWM_CLOCK_DIVIDER_32768", displayName: "Divide clock by 32768" },
]
let MCPWM_EmulationMode = [
	{ name: "MCPWM_EMULATION_STOP_AFTER_NEXT_TB", displayName: "Stop after next Time Base counter increment or decrement" },
	{ name: "MCPWM_EMULATION_STOP_AFTER_FULL_CYCLE", displayName: "Stop when counter completes whole cycle" },
	{ name: "MCPWM_EMULATION_FREE_RUN", displayName: "Free run" },
]
let MCPWM_PeriodLoadMode = [
	{ name: "MCPWM_PERIOD_SHADOW_LOAD_ENABLE", displayName: "PWM Active Period register loads from Shadow register at TBCTR=0 event" },
	{ name: "MCPWM_PERIOD_SHADOW_LOAD_DISABLE", displayName: "PWM Period register load from Shadow register is disabled" },
]
let MCPWM_SyncCountMode = [
	{ name: "MCPWM_COUNT_MODE_DOWN_AFTER_SYNC", displayName: "Count down after sync event" },
	{ name: "MCPWM_COUNT_MODE_UP_AFTER_SYNC", displayName: "Count up after sync event" },
]
let MCPWM_SyncOutPulseMode = [
	{ name: "MCPWM_SYNC_OUT_PULSE_ON_SOFTWARE", displayName: "Sync pulse is generated by software" },
	{ name: "MCPWM_SYNC_OUT_PULSE_ON_COUNTER_ZERO", displayName: "Sync pulse is generated when time base counter equals zero" },
	{ name: "MCPWM_SYNC_OUT_PULSE_ON_COUNTER_COMPARE_C", displayName: "Sync pulse is generated when time base counter equals compare C value" },
	{ name: "MCPWM_SYNC_OUT_PULSE_ON_COUNTER_COMPARE_D", displayName: "Sync pulse is generated when time base counter equals compare D value" },
	{ name: "MCPWM_SYNC_OUT_PULSE_DISABLED", displayName: "Sync pulse is disabled" },
]
let MCPWM_SyncPulseSource = [
	{ name: "MCPWM_SYNC_PULSE_DISABLED", displayName: "Sync Peripheral Signal Pulse is disabled" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_PERIOD", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals Period" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_ZERO", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals zero" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_CMPC_UP", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals compare C value while counting up" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_CMPC_DOWN", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals compare C value while counting down" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_CMPD_UP", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals compare D value while counting up" },
	{ name: "MCPWM_SYNCPERSEL_SOURCE_CMPD_DOWN", displayName: "Sync Peripheral Signal Pulse is generated when time base counter equals compare D value while counting down" },
]
let MCPWM_SyncInPulseSource = [
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_DISABLE", displayName: "Disable Sync-in" },
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_INPUTXBAR_OUT5", displayName: "Sync-in source is Input XBAR out5 signal" },
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_INPUTXBAR_OUT6", displayName: "Sync-in source is Input XBAR out6 signal" },
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_SYNCOUT_ECAP1", displayName: "Sync-in source is ECAP1 sync-out signal" },
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_SYNCOUT_MCPWM1", displayName: "Sync-in source is MCPWM1 sync-out signal" },
	{ name: "MCPWM_SYNC_IN_PULSE_SRC_SYNCOUT_MCPWM3", displayName: "Sync-in source is MCPWM3 sync-out signal" },
]
let MCPWM_CounterCompareModule = [
	{ name: "MCPWM_COUNTER_COMPARE_1A", displayName: "Counter compare 1A" },
	{ name: "MCPWM_COUNTER_COMPARE_1B", displayName: "Counter compare 1B" },
	{ name: "MCPWM_COUNTER_COMPARE_2A", displayName: "Counter compare 2A" },
	{ name: "MCPWM_COUNTER_COMPARE_2B", displayName: "Counter compare 2B" },
	{ name: "MCPWM_COUNTER_COMPARE_3A", displayName: "Counter compare 3A" },
	{ name: "MCPWM_COUNTER_COMPARE_3B", displayName: "Counter compare 3B" },
	{ name: "MCPWM_COUNTER_COMPARE_C", displayName: "Counter compare C" },
	{ name: "MCPWM_COUNTER_COMPARE_D", displayName: "Counter compare D" },
]
let MCPWM_CounterCompareLoadMode = [
	{ name: "MCPWM_COMP_LOAD_ON_CNTR_ZERO", displayName: "Load when counter equals zero" },
	{ name: "MCPWM_COMP_LOAD_ON_CNTR_PERIOD", displayName: "Load when counter equals period" },
	{ name: "MCPWM_COMP_LOAD_ON_CNTR_ZERO_PERIOD", displayName: "Load when counter equals zero or period" },
	{ name: "MCPWM_COMP_LOAD_FREEZE", displayName: "Freeze shadow to active load" },
]
let MCPWM_ActionQualifierOutputModule = [
	{ name: "MCPWM_AQ_OUTPUT_1A", displayName: "MCPWMx1A output" },
	{ name: "MCPWM_AQ_OUTPUT_1B", displayName: "MCPWMx1B output" },
	{ name: "MCPWM_AQ_OUTPUT_2A", displayName: "MCPWMx2A output" },
	{ name: "MCPWM_AQ_OUTPUT_2B", displayName: "MCPWMx2B output" },
	{ name: "MCPWM_AQ_OUTPUT_3A", displayName: "MCPWMx3A output" },
	{ name: "MCPWM_AQ_OUTPUT_3B", displayName: "MCPWMx3B output" },
]
let MCPWM_ActionQualifierOutput = [
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE", displayName: "No change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW", displayName: "Set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH", displayName: "Set output pins to High" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE", displayName: "Toggle the output pins" },
]
let MCPWM_ActionQualifierSWForceOutput = [
	{ name: "MCPWM_AQ_SW_FORCE_DISABLED", displayName: "SW force Action is disabled" },
	{ name: "MCPWM_AQ_SW_CONTINUOUS_LOW", displayName: "Set output pins to continuos low" },
	{ name: "MCPWM_AQ_SW_CONTINUOUS_HIGH", displayName: "Set output pins to continuos High" },
	{ name: "MCPWM_AQ_SW_ONE_SHOT_LOW", displayName: "Set output to low when one shot is triggered" },
	{ name: "MCPWM_AQ_SW_ONE_SHOT_HIGH", displayName: "Set output to high when one shot is triggered" },
	{ name: "MCPWM_AQ_SW_ONE_SHOT_TOGGLE", displayName: "Toggle output when one shot is triggered" },
]
let MCPWM_ActionQualifierModule = [
	{ name: "MCPWM_ACTION_QUALIFIER_1A", displayName: "Action Qualifier A" },
	{ name: "MCPWM_ACTION_QUALIFIER_1B", displayName: "Action Qualifier B" },
	{ name: "MCPWM_ACTION_QUALIFIER_2A", displayName: "Action Qualifier A" },
	{ name: "MCPWM_ACTION_QUALIFIER_2B", displayName: "Action Qualifier B" },
	{ name: "MCPWM_ACTION_QUALIFIER_3A", displayName: "Action Qualifier A" },
	{ name: "MCPWM_ACTION_QUALIFIER_3B", displayName: "Action Qualifier B" },
]
let MCPWM_ActionQualifierLoadMode = [
	{ name: "MCPWM_AQ_LOAD_ON_CNTR_ZERO", displayName: "Load when counter equals zero" },
	{ name: "MCPWM_AQ_LOAD_ON_CNTR_PERIOD", displayName: "Load when counter equals period" },
	{ name: "MCPWM_AQ_LOAD_ON_CNTR_ZERO_PERIOD", displayName: "Load when counter equals zero or period" },
	{ name: "MCPWM_AQ_LOAD_FREEZE", displayName: "Freeze shadow to active load" },
]
let MCPWM_ActionQualifierOutputEvent = [
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_ZERO", displayName: "Time base counter equals zero" },
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_PERIOD", displayName: "Time base counter equals period" },
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_UP_CMPA", displayName: "Time base counter up equals CMPA" },
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_DOWN_CMPA", displayName: "Time base counter down equals CMPA" },
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_UP_CMPB", displayName: "Time base counter up equals CMPB" },
	{ name: "MCPWM_AQ_OUTPUT_ON_TIMEBASE_DOWN_CMPB", displayName: "Time base counter down equals CMPB" },
]
let MCPWM_ActionQualifierEventAction = [
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_ZERO", displayName: "Time base counter equals zero and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_ZERO", displayName: "Time base counter equals zero and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_ZERO", displayName: "Time base counter equals zero and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_ZERO", displayName: "Time base counter equals zero and toggle the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_PERIOD", displayName: "Time base counter equals period and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_PERIOD", displayName: "Time base counter equals period and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_PERIOD", displayName: "Time base counter equals period and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_PERIOD", displayName: "Time base counter equals period and toggle the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_UP_CMPA", displayName: "Time base counter up equals CMPA and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_UP_CMPA", displayName: "Time base counter up equals CMPA and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_UP_CMPA", displayName: "Time base counter up equals CMPA and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_UP_CMPA", displayName: "Time base counter up equals CMPA and toggle the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_DOWN_CMPA", displayName: "Time base counter down equals CMPA and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_DOWN_CMPA", displayName: "Time base counter down equals CMPA and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_DOWN_CMPA", displayName: "Time base counter down equals CMPA and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_DOWN_CMPA", displayName: "Time base counter down equals CMPA and toggle the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_UP_CMPB", displayName: "Time base counter up equals CMPB and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_UP_CMPB", displayName: "Time base counter up equals CMPB and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_UP_CMPB", displayName: "Time base counter up equals CMPB and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_UP_CMPB", displayName: "Time base counter up equals CMPB and toggle the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_NO_CHANGE_DOWN_CMPB", displayName: "Time base counter down equals CMPB and no change in the output pins" },
	{ name: "MCPWM_AQ_OUTPUT_LOW_DOWN_CMPB", displayName: "Time base counter down equals CMPB and set output pins to low" },
	{ name: "MCPWM_AQ_OUTPUT_HIGH_DOWN_CMPB", displayName: "Time base counter down equals CMPB and set output pins to high" },
	{ name: "MCPWM_AQ_OUTPUT_TOGGLE_DOWN_CMPB", displayName: "Time base counter down equals CMPB and toggle the output pins" },
]
let MCPWM_GlobalLoadTrigger = [
	{ name: "MCPWM_GL_LOAD_PULSE_CNTR_ZERO", displayName: "Load when counter is equal to zero" },
	{ name: "MCPWM_GL_LOAD_PULSE_CNTR_PERIOD", displayName: "Load when counter is equal to period" },
	{ name: "MCPWM_GL_LOAD_PULSE_CNTR_ZERO_PERIOD", displayName: "Load when counter is equal to zero or period" },
	{ name: "MCPWM_GL_LOAD_PULSE_GLOBAL_FORCE", displayName: "Load on global force" },
]
let MCPWM_DeadBandOutput = [
	{ name: "MCPWM_DB_OUTPUT_A", displayName: "DB output is MCPWMA" },
	{ name: "MCPWM_DB_OUTPUT_B", displayName: "DB output is MCPWMB" },
]
let MCPWM_DeadBandDelayMode = [
	{ name: "MCPWM_DB_RED", displayName: "DB RED (Rising Edge Delay) mode" },
	{ name: "MCPWM_DB_FED", displayName: "DB FED (Falling Edge Delay) mode" },
]
let MCPWM_DeadBandPolarity = [
	{ name: "MCPWM_DB_POLARITY_ACTIVE_HIGH", displayName: "DB polarity is not inverted" },
	{ name: "MCPWM_DB_POLARITY_ACTIVE_LOW", displayName: "DB polarity is inverted" },
]
let MCPWM_RisingEdgeDelayLoadMode = [
	{ name: "MCPWM_RED_LOAD_ON_CNTR_ZERO", displayName: "Load when counter equals zero" },
	{ name: "MCPWM_RED_LOAD_ON_CNTR_PERIOD", displayName: "Load when counter equals period" },
	{ name: "MCPWM_RED_LOAD_ON_CNTR_ZERO_PERIOD", displayName: "Load when counter equals zero or period" },
	{ name: "MCPWM_RED_LOAD_FREEZE", displayName: "Freeze shadow to active load" },
]
let MCPWM_FallingEdgeDelayLoadMode = [
	{ name: "MCPWM_FED_LOAD_ON_CNTR_ZERO", displayName: "Load when counter equals zero" },
	{ name: "MCPWM_FED_LOAD_ON_CNTR_PERIOD", displayName: "Load when counter equals period" },
	{ name: "MCPWM_FED_LOAD_ON_CNTR_ZERO_PERIOD", displayName: "Load when counter equals zero or period" },
	{ name: "MCPWM_FED_LOAD_FREEZE", displayName: "Freeze shadow to active load" },
]
let MCPWM_TripZoneEvent = [
	{ name: "MCPWM_TZ_ACTION_EVENT_TZA", displayName: "TZ1 - TZ8" },
	{ name: "MCPWM_TZ_ACTION_EVENT_TZB", displayName: "TZ1 - TZ8" },
]
let MCPWM_TripZoneAction = [
	{ name: "MCPWM_TZ_ACTION_HIGH_Z", displayName: "High impedance output" },
	{ name: "MCPWM_TZ_ACTION_HIGH", displayName: "High voltage state" },
	{ name: "MCPWM_TZ_ACTION_LOW", displayName: "Low voltage state" },
	{ name: "MCPWM_TZ_ACTION_DISABLE", displayName: "Disable action" },
]
let MCPWM_TripZoneCBCMode = [
	{ name: "MCPWM_TZ_CBC_PULSE_CLR_NONE", displayName: "Disable CBC pulse Clear" },
	{ name: "MCPWM_TZ_CBC_PULSE_CLR_CNTR_ZERO", displayName: "Clear CBC pulse when counter equals zero" },
	{ name: "MCPWM_TZ_CBC_PULSE_CLR_CNTR_PERIOD", displayName: "Clear CBC pulse when counter equals period" },
	{ name: "MCPWM_TZ_CBC_PULSE_CLR_CNTR_ZERO_PERIOD", displayName: "Clear CBC pulse when counter equals zero or period" },
]
let MCPWM_ADCStartOfConversionType = [
	{ name: "MCPWM_SOC_A", displayName: "SOC A" },
	{ name: "MCPWM_SOC_B", displayName: "SOC B" },
	{ name: "MCPWM_SOC_C", displayName: "SOC C" },
	{ name: "MCPWM_SOC_D", displayName: "SOC D" },
]
let MCPWM_ADCStartOfConversionSource = [
	{ name: "MCPWM_SOC_DISABLED", displayName: "Event is Disabled" },
	{ name: "MCPWM_SOC_TBCTR_ZERO", displayName: "Time-base counter equal to zero" },
	{ name: "MCPWM_SOC_TBCTR_PERIOD", displayName: "Time-base counter equal to period" },
	{ name: "MCPWM_SOC_TBCTR_ZERO_PERIOD", displayName: "Time-base counter equal to zero or period" },
	{ name: "MCPWM_SOC_TBCTR_U_CMPC", displayName: "Time-base counter equal to CMPC when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMPD", displayName: "Time-base counter equal to CMPD when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP1A", displayName: "Time-base counter equal to CMP1A when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP1B", displayName: "Time-base counter equal to CMP1B when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP2A", displayName: "Time-base counter equal to CMP2A when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP2B", displayName: "Time-base counter equal to CMP2B when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP3A", displayName: "Time-base counter equal to CMP3A when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_U_CMP3B", displayName: "Time-base counter equal to CMP3B when the timer is incrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMPC", displayName: "Time-base counter equal to CMPC when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMPD", displayName: "Time-base counter equal to CMPD when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP1A", displayName: "Time-base counter equal to CMP1A when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP1B", displayName: "Time-base counter equal to CMP1B when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP2A", displayName: "Time-base counter equal to CMP2A when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP2B", displayName: "Time-base counter equal to CMP2B when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP3A", displayName: "Time-base counter equal to CMP3A when the timer is Decrementing" },
	{ name: "MCPWM_SOC_TBCTR_D_CMP3B", displayName: "Time-base counter equal to CMP3B when the timer is Decrementing" },
]
let MCPWM_EventTriggerType = [
	{ name: "MCPWM_ET_1", displayName: "EVT 1" },
	{ name: "MCPWM_ET_2", displayName: "EVT 2" },
]
let MCPWM_EventTriggerSource = [
	{ name: "MCPWM_EVT_DISABLED", displayName: "Event is Disabled" },
	{ name: "MCPWM_EVT_TBCTR_ZERO", displayName: "Time-base counter equal to zero" },
	{ name: "MCPWM_EVT_TBCTR_PERIOD", displayName: "Time-base counter equal to period" },
	{ name: "MCPWM_EVT_TBCTR_ZERO_PERIOD", displayName: "Time-base counter equal to zero or period" },
	{ name: "MCPWM_EVT_TBCTR_U_CMPC", displayName: "Time-base counter equal to CMPC when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMPD", displayName: "Time-base counter equal to CMPD when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP1A", displayName: "Time-base counter equal to CMP1A when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP1B", displayName: "Time-base counter equal to CMP1B when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP2A", displayName: "Time-base counter equal to CMP2A when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP2B", displayName: "Time-base counter equal to CMP2B when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP3A", displayName: "Time-base counter equal to CMP3A when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_U_CMP3B", displayName: "Time-base counter equal to CMP3B when the timer is incrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMPC", displayName: "Time-base counter equal to CMPC when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMPD", displayName: "Time-base counter equal to CMPD when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP1A", displayName: "Time-base counter equal to CMP1A when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP1B", displayName: "Time-base counter equal to CMP1B when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP2A", displayName: "Time-base counter equal to CMP2A when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP2B", displayName: "Time-base counter equal to CMP2B when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP3A", displayName: "Time-base counter equal to CMP3A when the timer is Decrementing" },
	{ name: "MCPWM_EVT_TBCTR_D_CMP3B", displayName: "Time-base counter equal to CMP3B when the timer is Decrementing" },
]
let MCPWM_TIME_BASE_STATUS_COUNT = [
	{ name: "MCPWM_TIME_BASE_STATUS_COUNT_UP", displayName: "Time base counter is counting up" },
	{ name: "MCPWM_TIME_BASE_STATUS_COUNT_DOWN", displayName: "Time base counter is counting down" },
]
let MCPWM_DB_INPUT = [
	{ name: "MCPWM_DB_INPUT_MCPWMA", displayName: "Input signal is MCPWMA" },
	{ name: "MCPWM_DB_INPUT_MCPWMB", displayName: "Input signal is MCPWMB" },
	{ name: "MCPWM_DB_INPUT_DB_RED", displayName: "Input signal is the output of Rising Edge delay" },
]
let MCPWM_TZ_SIGNAL = [
	{ name: "MCPWM_TZ_SIGNAL_CBC1", displayName: "TZ1 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC2", displayName: "TZ2 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC3", displayName: "TZ3 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC4", displayName: "TZ4 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC5", displayName: "TZ5 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC6", displayName: "TZ6 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC7", displayName: "TZ7 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_CBC8", displayName: "TZ8 Cycle By Cycle" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT1", displayName: "One-shot TZ1" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT2", displayName: "One-shot TZ2" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT3", displayName: "One-shot TZ3" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT4", displayName: "One-shot TZ4" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT5", displayName: "One-shot TZ5" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT6", displayName: "One-shot TZ6" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT7", displayName: "One-shot TZ7" },
	{ name: "MCPWM_TZ_SIGNAL_OSHT8", displayName: "One-shot TZ8" },
]
let MCPWM_TZ_FLAG = [
	{ name: "MCPWM_TZ_FLAG_CBC_TZ1", displayName: "CBC flag 1" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ2", displayName: "CBC flag 2" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ3", displayName: "CBC flag 3" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ4", displayName: "CBC flag 4" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ5", displayName: "CBC flag 5" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ6", displayName: "CBC flag 6" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ7", displayName: "CBC flag 7" },
	{ name: "MCPWM_TZ_FLAG_CBC_TZ8", displayName: "CBC flag 8" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ1", displayName: "OST flag 1" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ2", displayName: "OST flag 2" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ3", displayName: "OST flag 3" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ4", displayName: "OST flag 4" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ5", displayName: "OST flag 5" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ6", displayName: "OST flag 6" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ7", displayName: "OST flag 7" },
	{ name: "MCPWM_TZ_FLAG_OST_TZ8", displayName: "OST flag 8" },
	{ name: "MCPWM_TZ_FLAG_ALL", displayName: "All Trip Zone Flags" },
]
let MCPWM_INT = [
	{ name: "MCPWM_INT_TZ_CBC", displayName: "Interrupt Source is Trip Zone CBC signal" },
	{ name: "MCPWM_INT_TZ_OST", displayName: "Interrupt Source is Trip Zone OST signal" },
	{ name: "MCPWM_INT_ET_1", displayName: "Interrupt Source is Event Trigger 1 signal" },
	{ name: "MCPWM_INT_ET_2", displayName: "Interrupt Source is Event Trigger 2 signal" },
	{ name: "MCPWM_INT_TBCTR_OVF", displayName: "Interrupt Source is Counter Overflow signal" },
	{ name: "MCPWM_INT_SOURCE_ALL", displayName: "All Interrupt Sources" },
]
module.exports = {
	MCPWM_TimeBaseCountMode: MCPWM_TimeBaseCountMode,
	MCPWM_ClockDivider: MCPWM_ClockDivider,
	MCPWM_EmulationMode: MCPWM_EmulationMode,
	MCPWM_PeriodLoadMode: MCPWM_PeriodLoadMode,
	MCPWM_SyncCountMode: MCPWM_SyncCountMode,
	MCPWM_SyncOutPulseMode: MCPWM_SyncOutPulseMode,
	MCPWM_SyncPulseSource: MCPWM_SyncPulseSource,
	MCPWM_SyncInPulseSource: MCPWM_SyncInPulseSource,
	MCPWM_CounterCompareModule: MCPWM_CounterCompareModule,
	MCPWM_CounterCompareLoadMode: MCPWM_CounterCompareLoadMode,
	MCPWM_ActionQualifierOutputModule: MCPWM_ActionQualifierOutputModule,
	MCPWM_ActionQualifierOutput: MCPWM_ActionQualifierOutput,
	MCPWM_ActionQualifierSWForceOutput: MCPWM_ActionQualifierSWForceOutput,
	MCPWM_ActionQualifierModule: MCPWM_ActionQualifierModule,
	MCPWM_ActionQualifierLoadMode: MCPWM_ActionQualifierLoadMode,
	MCPWM_ActionQualifierOutputEvent: MCPWM_ActionQualifierOutputEvent,
	MCPWM_ActionQualifierEventAction: MCPWM_ActionQualifierEventAction,
	MCPWM_GlobalLoadTrigger: MCPWM_GlobalLoadTrigger,
	MCPWM_DeadBandOutput: MCPWM_DeadBandOutput,
	MCPWM_DeadBandDelayMode: MCPWM_DeadBandDelayMode,
	MCPWM_DeadBandPolarity: MCPWM_DeadBandPolarity,
	MCPWM_RisingEdgeDelayLoadMode: MCPWM_RisingEdgeDelayLoadMode,
	MCPWM_FallingEdgeDelayLoadMode: MCPWM_FallingEdgeDelayLoadMode,
	MCPWM_TripZoneEvent: MCPWM_TripZoneEvent,
	MCPWM_TripZoneAction: MCPWM_TripZoneAction,
	MCPWM_TripZoneCBCMode: MCPWM_TripZoneCBCMode,
	MCPWM_ADCStartOfConversionType: MCPWM_ADCStartOfConversionType,
	MCPWM_ADCStartOfConversionSource: MCPWM_ADCStartOfConversionSource,
	MCPWM_EventTriggerType: MCPWM_EventTriggerType,
	MCPWM_EventTriggerSource: MCPWM_EventTriggerSource,
	MCPWM_TIME_BASE_STATUS_COUNT: MCPWM_TIME_BASE_STATUS_COUNT,
	MCPWM_DB_INPUT: MCPWM_DB_INPUT,
	MCPWM_TZ_SIGNAL: MCPWM_TZ_SIGNAL,
	MCPWM_TZ_FLAG: MCPWM_TZ_FLAG,
	MCPWM_INT: MCPWM_INT,
}
