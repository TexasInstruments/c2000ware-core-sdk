//#############################################################################
//  \file sdfm_ex2_filter_sync_claread_cla.cla
//
//  \brief  SDFM filter sync
//  \author
//  \date
//
//
//  Group:             C2000
//
//#############################################################################
//
//
// 
// C2000Ware v5.05.00.00
//
// Copyright (C) 2024 Texas Instruments Incorporated - http://www.ti.com
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//   Redistributions of source code must retain the above copyright 
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the 
//   documentation and/or other materials provided with the   
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//#############################################################################

//
// Included Files
//
#include <stdint.h>
#include "f28p65x_device.h"
#include "f28p65x_sdfm_drivers.h"
#include "sdfm_claread.h"

//
// Whether MDEBUGSTOP needs to be compiled or not
//
#define CLA_DEBUG       1
#define PIEACK_GROUP5   0x0010

#pragma DATA_SECTION(filter1Result,"Filter1_RegsFile");
#pragma DATA_SECTION(filter2Result,"Filter2_RegsFile");
#pragma DATA_SECTION(filter3Result,"Filter3_RegsFile");
#pragma DATA_SECTION(filter4Result,"Filter4_RegsFile");

int16_t  filter1Result[MAX_SAMPLES];
int16_t  filter2Result[MAX_SAMPLES];
int16_t  filter3Result[MAX_SAMPLES];
int16_t  filter4Result[MAX_SAMPLES];

int16_t loopCounter1;
int16_t loopCounter2;

//
// Task 1
//
__interrupt void Cla1Task1 ( void )
{
#if (CLA_DEBUG==1)
__mdebugstop();
#endif
        uint32_t sdfmReadFlagRegister;

        //
        // Read SDIFLG of SDFM1
        //
        sdfmReadFlagRegister = Sdfm1Regs.SDIFLG.all;

        //
        // Reset the loop counter
        //
        if(loopCounter1 >= MAX_SAMPLES)
        {
            loopCounter1 = 0;
        }

        filter1Result[loopCounter1]   = SDFM1_READ_FILTER1_DATA_16BIT;
        filter2Result[loopCounter1]   = SDFM1_READ_FILTER2_DATA_16BIT;
        filter3Result[loopCounter1]   = SDFM1_READ_FILTER3_DATA_16BIT;
        filter4Result[loopCounter1++] = SDFM1_READ_FILTER4_DATA_16BIT;

        //
        // Clear SDFM1.SDIFLG register
        //
        Sdfm1Regs.SDIFLGCLR.all = sdfmReadFlagRegister;
}

//
// Task 2
//
__interrupt void Cla1Task2 ( void )
{
#if (CLA_DEBUG==1)
__mdebugstop();
#endif
        uint32_t sdfmReadFlagRegister;

        //
        // Read SDIFLG of SDFM2
        //
        sdfmReadFlagRegister = Sdfm2Regs.SDIFLG.all;

        //
        // Reset the loop counter
        //
        if(loopCounter2 >= MAX_SAMPLES)
        {
            loopCounter2 = 0;
        }

        filter1Result[loopCounter2]   = SDFM2_READ_FILTER1_DATA_16BIT;
        filter2Result[loopCounter2]   = SDFM2_READ_FILTER2_DATA_16BIT;
        filter3Result[loopCounter2]   = SDFM2_READ_FILTER3_DATA_16BIT;
        filter4Result[loopCounter2++] = SDFM2_READ_FILTER4_DATA_16BIT;

        //
        // Clear SDFM2.SDIFLG register
        //
        Sdfm2Regs.SDIFLGCLR.all = sdfmReadFlagRegister;
}

//
// Task 3
//
__interrupt void Cla1Task3 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 4
//
__interrupt void Cla1Task4 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 5
//
__interrupt void Cla1Task5 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif

}

//
// Task 6
//
__interrupt void Cla1Task6 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 7
//
__interrupt void Cla1Task7 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 8
//
__interrupt void Cla1Task8 ( void )
{
    loopCounter1 = 0;
    loopCounter2 = 0;
}

//
// End of file
//
