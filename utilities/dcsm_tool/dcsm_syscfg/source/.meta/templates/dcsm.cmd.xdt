%%{
    let Common   = system.getScript('/utilities/dcsm_tool/dcsm_syscfg/source/Common.js');
    let mod       = system.modules['/utilities/dcsm_tool/dcsm_syscfg/source/DCSM'];
    if (mod == null)
    {
        return ""
    }
    let instances = mod.$instances;
    var inst;
    for (var inst_i in instances)
    {
        inst = instances[inst_i];
    }
    let zone1 = inst.ZONE1
    let zone2 = inst.ZONE2
    let zone1_OTP = inst.ZONE1_OTP
    let zone2_OTP = inst.ZONE2_OTP

    var bank1_exists = false;
    if (Common.getDeviceName().includes("F28004x"))
    {
        bank1_exists = true;
    }
    
    var zone1_LINKPOINTER_int = 0x78000
    var zone2_LINKPOINTER_int = 0x78200
    var bank1_zone1_LINKPOINTER_int = 0x78400
    var bank1_zone2_LINKPOINTER_int = 0x78600

    zone1_LINKPOINTER_int += parseInt(zone1.NEXT_LINKPOINTER_OFFSET)
    zone2_LINKPOINTER_int += parseInt(zone2.NEXT_LINKPOINTER_OFFSET)
    if (bank1_exists)
    {
        bank1_zone1_LINKPOINTER_int += parseInt(zone1["NEXT_LINKPOINTER_OFFSET" + Common.getBankNames(1)])
        bank1_zone2_LINKPOINTER_int += parseInt(zone2["NEXT_LINKPOINTER_OFFSET" + Common.getBankNames(1)])
    }

    var zone1_LINKPOINTER = "0x78020"
    var zone2_LINKPOINTER = "0x78220"
    var bank1_zone1_LINKPOINTER = "0x78420"
    var bank1_zone2_LINKPOINTER = "0x78620"

    zone1_LINKPOINTER = "0x" + zone1_LINKPOINTER_int.toString(16)
    zone2_LINKPOINTER = "0x" + zone2_LINKPOINTER_int.toString(16)
    if (bank1_exists)
    {
        bank1_zone1_LINKPOINTER = "0x" + bank1_zone1_LINKPOINTER_int.toString(16)
        bank1_zone2_LINKPOINTER = "0x" + bank1_zone2_LINKPOINTER_int.toString(16)
    }

    var DSECT_zone1 = ""
    var DSECT_zone2 = ""
	var DSECT_zone1_OTP = ""
    var DSECT_zone2_OTP = ""
	var DSECT_zone1_OTP_BOOT = ""
    var DSECT_zone2_OTP_BOOT = ""
	var DSECT_zone1_OTP_BOOT_JLM = ""
    var DSECT_zone2_OTP_BOOT_JLM = ""
	var DSECT_zone1_OTP_BOOT_JLM_workaround = ""
	

    if (!zone1["useZone"])
    {
        DSECT_zone1 = ", type = DSECT"
    }

    if (!zone2["useZone"])
    {
        DSECT_zone2 = ", type = DSECT"
    }
	
	
    if (!zone1_OTP["useZone"])
    {
        DSECT_zone1_OTP = ", type = DSECT"
    }

    if (!zone2_OTP["useZone"])
    {
        DSECT_zone2_OTP = ", type = DSECT"
    }

    if (!zone1_OTP["useZone"] || !zone1_OTP["configureBoot"])
    {
        DSECT_zone1_OTP_BOOT = ", type = DSECT"
    }

    if (!zone2_OTP["useZone"] || !zone2_OTP["configureBoot"])
    {
        DSECT_zone2_OTP_BOOT = ", type = DSECT"
    }

    if (["F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName()))
    {  
        if (!zone1_OTP["useZone"] || !zone1_OTP["JTAGLOCK"])
        {
            DSECT_zone1_OTP_BOOT_JLM = ", type = DSECT"
        }
    }
    else
    {  
        if (!zone1_OTP["useZone"] || !zone1_OTP["JTAGLOCK"])
        {
            DSECT_zone1_OTP_BOOT_JLM = ", type = DSECT"
        }
        if (!zone2_OTP["useZone"] || !zone2_OTP["JTAGLOCK"])
        {
            DSECT_zone2_OTP_BOOT_JLM = ", type = DSECT"
        }
    }
%%}
/* this linker command file is to be included if user wants to use the DCSM feature on the device
 * DCSM  means Dual Zone Code Security Module.
 * This linker command file works as an addendum ot the already existing Flash/RAM linker command file
 * that the project has.
 * The sections in the *_ZoneSelectBlock.asm source file is linked as per the commands given in the file
 * NOTE - please note fill=0xFFFF, this helps if users include this file in the project by mistake and
 * doesn't provide the needed proper *_ZoneSelectBlock.asm sources .
 * Please refer to the Blinky DCSM example in the controlsuite examples for proper usage of this.
 *
 * Once users are confident that they want to program the passwords in OTP, the DSECT section type can be removed.
 *
*/

MEMORY
{
PAGE 0 :  /* Program Memory */

%if (["F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())){
   /* Z1 OTP.  Z1 password locations / Flash and RAM partitioning */
   DCSM_OTP_Z1_LINKPOINTER     : origin = 0x78000, length = 0x00006
   DCSM_OTP_Z1_JLM_ENABLE      : origin = 0x78006, length = 0x00002
   DCSM_OTP_Z1_GPREG           : origin = 0x78008, length = 0x00008
   DCSM_OTP_Z1_PSWDLOCK        : origin = 0x78010, length = 0x00002
    % if (!["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   DCSM_OTP_Z1_CRCLOCK         : origin = 0x78012, length = 0x00002
    % } else if (["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   DCSM_OTP_Z1_CRCLOCK_RSVD    : origin = 0x78012, length = 0x00002
    % }
   DCSM_OTP_Z1_JTAG_PSWDH      : origin = 0x78014, length = 0x00004
   DCSM_OTP_Z1_CMAC_KEY        : origin = 0x78018, length = 0x00008

   /* DCSM Z1 Zone Select Contents (!!Movable!!) */
   DCSM_ZSEL_Z1_P0             : origin = `zone1_LINKPOINTER`, length = 0x000020
% } else { 
   /* Z1 OTP.  LinkPointers */
   DCSM_OTP_Z1_LINKPOINTER   : origin = 0x78000, length = 0x00000C
   /* Z1 OTP.  GPREG1/GPREG2 */
   DCSM_OTP_Z1_GPREG         : origin = 0x7800C, length = 0x000004
   /* Z1 OTP.  PSWDLOCK/RESERVED */
   DCSM_OTP_Z1_PSWDLOCK	    : origin = 0x78010, length = 0x000004
   /* Z1 OTP.  CRCLOCK/RESERVED */
   DCSM_OTP_Z1_CRCLOCK	    : origin = 0x78014, length = 0x000004
   /* Z1 OTP.  RESERVED/JTAGLOCK */
   DCSM_OTP_Z1_JTAGLOCK	    : origin = 0x78018, length = 0x000004
   /* Z1 OTP.  RESERVED/BOOTCTRL */
   DCSM_OTP_Z1_BOOTCTRL	    : origin = 0x7801C, length = 0x000004

   /* DCSM Z1 Zone Select Contents (!!Movable!!) */
   /* Z1 OTP.  Z1 password locations / Flash and RAM partitioning */
   DCSM_ZSEL_Z1_P0	        : origin = `zone1_LINKPOINTER`, length = 0x000010
% }

%if (["F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())){
   /* Z2 OTP.  Z2 password locations / Flash and RAM partitioning */
   DCSM_OTP_Z2_LINKPOINTER     : origin = 0x78200, length = 0x00006
   DCSM_OTP_Z2_RSVD            : origin = 0x78206, length = 0x00002
   DCSM_OTP_Z2_GPREG           : origin = 0x78208, length = 0x00008
   DCSM_OTP_Z2_PSWDLOCK        : origin = 0x78210, length = 0x00002
    % if (!["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   DCSM_OTP_Z2_CRCLOCK         : origin = 0x78212, length = 0x00002
    % } else if (["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   DCSM_OTP_Z2_CRCLOCK_RSVD    : origin = 0x78212, length = 0x00002
    % }
   DCSM_OTP_Z2_RSVD1           : origin = 0x78214, length = 0x0000C
   
   /* DCSM Z2 Zone Select Contents (!!Movable!!) */
   DCSM_ZSEL_Z2_P0             : origin = `zone2_LINKPOINTER`, length = 0x000020
% } else {
   /* Z2 OTP.  LinkPointers */
   DCSM_OTP_Z2_LINKPOINTER	: origin = 0x78200, length = 0x00000C
   /* Z2 OTP.  GPREG1/GPREG2 */
   DCSM_OTP_Z2_GPREG	        : origin = 0x7820C, length = 0x000004
   /* Z2 OTP.  PSWDLOCK/RESERVED */
   DCSM_OTP_Z2_PSWDLOCK	    : origin = 0x78210, length = 0x000004
   /* Z2 OTP.  CRCLOCK/RESERVED */
   DCSM_OTP_Z2_CRCLOCK	    : origin = 0x78214, length = 0x000004
   /* Z2 OTP.  RESERVED/JTAGLOCK */
   DCSM_OTP_Z2_JTAGLOCK	    : origin = 0x78218, length = 0x000004
   /* Z2 OTP.  GPREG3/BOOTCTRL */
   DCSM_OTP_Z2_BOOTCTRL	    : origin = 0x7821C, length = 0x000004

   /* DCSM Z2 Zone Select Contents (!!Movable!!) */
   /* Z2 OTP.  Z2 password locations / Flash and RAM partitioning  */
   DCSM_ZSEL_Z2_P0	        : origin = `zone2_LINKPOINTER`, length = 0x000010
% }

% if (bank1_exists) {
   /* BANK1 */
   /* B1 Z1 OTP.  LinkPointers */
   B1_DCSM_OTP_Z1_LINKPOINTER	: origin = 0x78400, length = 0x00000C

   /* DCSM B1 Z1 Zone Select Contents (!!Movable!!) */
   /* B1 Z1 OTP.  Flash partitioning */
   B1_DCSM_ZSEL_Z1_P0	        : origin = `bank1_zone1_LINKPOINTER`, length = 0x000010

   /* B1 Z2 OTP.  LinkPointers */
   B1_DCSM_OTP_Z2_LINKPOINTER	: origin = 0x78600, length = 0x00000C

   /* DCSM B1 Z2 Zone Select Contents (!!Movable!!) */
   /* B1 Z2 OTP.  Flash partitioning  */
   B1_DCSM_ZSEL_Z2_P0	        : origin = `bank1_zone2_LINKPOINTER`, length = 0x000010
% }
}

SECTIONS
{
   dcsm_otp_z1_linkpointer 	: > DCSM_OTP_Z1_LINKPOINTER		PAGE = 0`DSECT_zone1`
% if (["F28004x", "F28002x", "F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z1_gpreg        : > DCSM_OTP_Z1_GPREG		    PAGE = 0`DSECT_zone1_OTP_BOOT`
% }
   dcsm_otp_z1_pswdlock		: > DCSM_OTP_Z1_PSWDLOCK		PAGE = 0`DSECT_zone1_OTP`
    % if (!["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z1_crclock		: > DCSM_OTP_Z1_CRCLOCK			PAGE = 0`DSECT_zone1_OTP`
    % } else if (["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z1_crclock_rsvd : > DCSM_OTP_Z1_CRCLOCK_RSVD    PAGE = 0`DSECT_zone1_OTP`
    % }
% if (["F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())){
   dcsm_otp_z1_jlm_enable   : > DCSM_OTP_Z1_JLM_ENABLE,     PAGE = 0`DSECT_zone1_OTP_BOOT_JLM_workaround`
   dcsm_otp_z1_jtag_pswdh   : > DCSM_OTP_Z1_JTAG_PSWDH,     PAGE = 0`DSECT_zone1_OTP_BOOT_JLM`
   dcsm_otp_z1_cmac_key     : > DCSM_OTP_Z1_CMAC_KEY,       PAGE = 0`DSECT_zone1_OTP_BOOT`
% } else {   
    dcsm_otp_z1_jtaglock    : > DCSM_OTP_Z1_JTAGLOCK        PAGE = 0`DSECT_zone1_OTP_BOOT_JLM`
   dcsm_otp_z1_bootctrl		: > DCSM_OTP_Z1_BOOTCTRL		PAGE = 0`DSECT_zone1_OTP_BOOT`
% }
   dcsm_zsel_z1				: > DCSM_ZSEL_Z1_P0				PAGE = 0`DSECT_zone1`

   dcsm_otp_z2_linkpointer	: > DCSM_OTP_Z2_LINKPOINTER		PAGE = 0`DSECT_zone2`
% if (["F28004x", "F28002x", "F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z2_gpreg        : > DCSM_OTP_Z2_GPREG		    PAGE = 0`DSECT_zone2_OTP_BOOT`
% }
   dcsm_otp_z2_pswdlock		: > DCSM_OTP_Z2_PSWDLOCK		PAGE = 0`DSECT_zone2_OTP`
    % if (!["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z2_crclock		: > DCSM_OTP_Z2_CRCLOCK			PAGE = 0`DSECT_zone2_OTP`
    % } else if (["F280013x", "F28E12x"].includes(Common.getDeviceName())) {
   dcsm_otp_z2_crclock_rsvd : > DCSM_OTP_Z2_CRCLOCK_RSVD    PAGE = 0`DSECT_zone1_OTP`
    % }
% if (["F2838x", "F28003x", "F280013x", "F280015x", "F28P65x", "F28P55x", "F28E12x"].includes(Common.getDeviceName())){
   dcsm_rsvd_z2             : > DCSM_OTP_Z2_RSVD,           PAGE = 0`DSECT_zone2_OTP_BOOT`
   dcsm_rsvd1_z2            : > DCSM_OTP_Z2_RSVD1,          PAGE = 0`DSECT_zone2_OTP_BOOT`
% } else { 
    dcsm_otp_z2_jtaglock    : > DCSM_OTP_Z2_JTAGLOCK        PAGE = 0`DSECT_zone2_OTP_BOOT_JLM`
   dcsm_otp_z2_bootctrl		: > DCSM_OTP_Z2_BOOTCTRL		PAGE = 0`DSECT_zone2_OTP_BOOT`
% }
   dcsm_zsel_z2				: > DCSM_ZSEL_Z2_P0				PAGE = 0`DSECT_zone2`
% if (bank1_exists) {
   b1_dcsm_otp_z1_linkpointer 	: > B1_DCSM_OTP_Z1_LINKPOINTER		PAGE = 0`DSECT_zone1`
   b1_dcsm_zsel_z1				: > B1_DCSM_ZSEL_Z1_P0				PAGE = 0`DSECT_zone1`

   b1_dcsm_otp_z2_linkpointer	: > B1_DCSM_OTP_Z2_LINKPOINTER		PAGE = 0`DSECT_zone2`
   b1_dcsm_zsel_z2				: > B1_DCSM_ZSEL_Z2_P0				PAGE = 0`DSECT_zone2`
% }
}

/*
//===========================================================================
// End of file.
//===========================================================================
*/
