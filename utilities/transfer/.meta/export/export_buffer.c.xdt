/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <board.h>
#include <export/export_buffer.h>
% let transferCommon;
% if (system.getProducts()[0].name.includes("C2000"))
% { transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
% } else
% { transferCommon = system.getScript("/transfer/transferCommon.js");}
% 
% let exportMod = system.modules[transferCommon.getTransferPath() + "exporter.js"];
% let expInst = exportMod.$instances[0];
% let expLogBuff = expInst.exportLogBufferModule;
%
//*****************************************************************************
//
// EXPORTBUFF Ring Buffer
//
//*****************************************************************************
#include <transfer_ringbuffer.h>

#define `expLogBuff.$name`_BUFFER_SIZE `expLogBuff.bufferSize`
#define `expLogBuff.$name`_ELEMENT_SIZE `expLogBuff.elemPerBuffEntry`

char `expLogBuff.$name`_buffer[`expLogBuff.$name`_BUFFER_SIZE][`expLogBuff.$name`_ELEMENT_SIZE] = {0};
TransferRingBuffer `expLogBuff.$name`;
TransferRingBuffer_Handle `expLogBuff.$name`_Handle = &`expLogBuff.$name`;
volatile uint16_t `expLogBuff.$name`_bufferElementIndex = 0;
void __attribute__((weak)) EXPORTBUFF_transferBufferOverflow() {}

//*****************************************************************************
//
// Export Buffer initilalization function
//
//*****************************************************************************
void EXPORTBUFF_init()
{
    % if (expLogBuff) {
    TransferRingBuffer_init(
        `expLogBuff.$name`_Handle, 
        (char**)`expLogBuff.$name`_buffer, 
        `expLogBuff.$name`_BUFFER_SIZE, 
        sizeof(`expLogBuff.$name`_buffer[0]));
    % }
}

//*****************************************************************************
//
// Private low level functions
//
//*****************************************************************************
void EXPORTBUFF_writeChar(char c)
{
    uint16_t status = 0;
    status = TransferRingBuffer_writePartialElement(`expLogBuff.$name`_Handle, 
        `expLogBuff.$name`_bufferElementIndex, (char *)&c, 1);
    if (!status)
    {
        EXPORTBUFF_transferBufferOverflow();
        return;
    }

    `expLogBuff.$name`_bufferElementIndex += 1;
    if (`expLogBuff.$name`_bufferElementIndex >= `expLogBuff.$name`_ELEMENT_SIZE) {
        `expLogBuff.$name`_bufferElementIndex = 0;
        //
        // A buffer element is fully written, advance the ring buffer pointer
        //
        TransferRingBuffer_writePartialElementComplete(`expLogBuff.$name`_Handle);
    }
}

void EXPORTBUFF_writeStringLength(char *str, uint16_t strLength)
{
    uint16_t status = 0;
    char * strToWrite = str;
    uint16_t remLength = strLength;
    uint16_t spaceRemaining= 0;
    uint16_t writeLength = 0;
    while(remLength) {
        spaceRemaining = `expLogBuff.$name`_ELEMENT_SIZE - `expLogBuff.$name`_bufferElementIndex;
        if (remLength > spaceRemaining) {
            writeLength = spaceRemaining;
            remLength = remLength - spaceRemaining;
        }
        else {
            writeLength = remLength;
            remLength = 0;
        }
        
        status = TransferRingBuffer_writePartialElement(`expLogBuff.$name`_Handle, 
            `expLogBuff.$name`_bufferElementIndex, strToWrite, writeLength);
        if (!status)
        {
            EXPORTBUFF_transferBufferOverflow();
            return;
        }
        `expLogBuff.$name`_bufferElementIndex += writeLength;
        strToWrite += writeLength;

        if (`expLogBuff.$name`_bufferElementIndex >= `expInst.exportRXLength`) {
            `expLogBuff.$name`_bufferElementIndex = 0;
            //
            // A buffer element is fully written, advance the ring buffer pointer
            //
            TransferRingBuffer_writePartialElementComplete(`expLogBuff.$name`_Handle);
        }
    }
}

void EXPORTBUFF_flushBufferElement()
{
    uint16_t status = 0;
    uint16_t spaceRemaining= 0;
    if (`expLogBuff.$name`_bufferElementIndex > 0)
    {
        spaceRemaining = `expLogBuff.$name`_ELEMENT_SIZE - `expLogBuff.$name`_bufferElementIndex;
        status = TransferRingBuffer_writePartialElementWithConst(`expLogBuff.$name`_Handle, 
            `expLogBuff.$name`_bufferElementIndex, 0, spaceRemaining);
        if (!status)
        {
            EXPORTBUFF_transferBufferOverflow();
            return;
        }

        `expLogBuff.$name`_bufferElementIndex = 0;
        //
        // A buffer element is fully written, advance the ring buffer pointer
        //
        TransferRingBuffer_writePartialElementComplete(`expLogBuff.$name`_Handle);
    }
}

//*****************************************************************************
//
// Background Buffer Transfers
//
//*****************************************************************************
void EXPORTBUFF_transferBufferData()
{
    char bufferData[`expLogBuff.$name`_ELEMENT_SIZE];
    uint16_t buffReadResult = 0;
    buffReadResult = TransferRingBuffer_read(`expLogBuff.$name`_Handle, bufferData);
    if (buffReadResult) {
        EXPORT_transmitStringLengthBlocking((char *)bufferData, `expInst.exportRXLength`);
    }
}

void EXPORTBUFF_transferAllBufferData()
{
    char bufferData[`expLogBuff.$name`_ELEMENT_SIZE];
    uint16_t buffReadResult = 0;
    do {
        buffReadResult = TransferRingBuffer_read(`expLogBuff.$name`_Handle, bufferData);
        if (buffReadResult) {
            EXPORT_transmitStringLengthBlocking((char *)bufferData, `expInst.exportRXLength`);
        }
    } while (buffReadResult);
}
