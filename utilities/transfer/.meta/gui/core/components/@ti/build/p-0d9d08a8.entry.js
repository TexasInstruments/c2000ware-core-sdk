import{r as t,c as e,g as i,h as s}from"./p-823ca21f.js";import{SysConfigModel as n}from"../gc-model-sysconfig/lib/SysConfigModel";import{c as o}from"./p-4c4e8f8e.js";import{GcUtils as r}from"../gc-core-assets/lib/GcUtils";import{GcPromise as a}from"../gc-core-assets/lib/GcPromise";import{GcConsole as c}from"../gc-core-assets/lib/GcConsole";import{bindingRegistry as d}from"../gc-core-databind/lib/CoreDatabind";import{W as h}from"./p-b29896ef.js";import"../gc-core-assets/lib/GcFiles";import"../gc-core-assets/lib/GcLocalStorage";import"../gc-widget-message-dialog/lib/GcMessageDialog";const g=new c("gc-widget-sysconfig");let f=class{constructor(i){t(this,i);this.scriptChanged=e(this,"script-changed",7);this.impl=undefined;this.optional=false;this.getGcTheme=()=>{const t=document.querySelector("gc-widget-theme");return t.selectedThemeIndex===0?"light":"dark"}}onScriptChanged(){this.loadConfigScript()}async loadConfigScript(t){try{await f.whenSysConfigReady.promise;this.scriptChanged.emit({status:"busy"});this.scriptChanged.emit({status:"success",scriptEnv:await this.impl.loadConfigScript(t)})}catch(t){this.scriptChanged.emit({status:"error",message:t.message||t.toString()});return t}}async getConfigScript(){await f.whenSysConfigReady.promise;return await this.impl.getConfigScript()}async getGeneratedFile(t){await f.whenSysConfigReady.promise;return await this.impl.getGeneratedFile(t)}async addInstance(t,e,i){await f.whenSysConfigReady.promise;return await this.impl.addInstance(t,e)}async getEnvironment(){await f.whenSysConfigReady.promise;return this.impl.scriptEnvironment}async saveConfigScript(t){return this.impl.saveConfigScript(t)}async onThemeChangedEvent(t){if(typeof this.theme!=="string"&&window.ti){window.ti.SysConfig.updateTheme(t.detail.theme,await this.getEnvironment())}}async onThemePropChanged(t){window.ti.SysConfig.updateTheme(t,await this.getEnvironment())}componentWillLoad(){if(r.isInDesigner){this.el["getAdditionalProperties"]=t=>this.impl?.lookupSuggestedBindings(t)??[]}if(r.isInDesigner){if(typeof require==="undefined"){window.require=window.parent["require"]}if(typeof process==="undefined"){window.process=window.parent["process"]}if(typeof __dirname==="undefined"){window.__dirname=window.parent["__dirname"]}if(typeof __filename==="undefined"){window.__filename=window.parent["__filename"]}if(typeof window["nw"]==="undefined"){window["nw"]=window.parent["nw"]}}[{name:"modalRoot",type:"span"},{name:"notificationRoot",type:"span"},{name:"authIFrame",type:"iframe",hidden:true}].forEach((({name:t,type:e,hidden:i})=>{let s=document.getElementById(t);if(!s){s=document.createElement(e);s.id=t;if(i){s.style.cssText="display: none;"}document.body.appendChild(s)}}));const t="/sysconfig/embed.js";let e=document.querySelector(`script[src="${t}}"]`);if(!e){g.debug(`Creating <script src=${t}> tag.`);e=document.createElement("script");e.src=t;e.onload=()=>f.whenSysConfigReady.resolve();e.onerror=e=>{const i=`Failed to load ${t} Please ensure the sysconfig command line parameter is set to point to a SysConfig installation, when starting the GC server.`;this.scriptChanged.emit({status:"error",message:i});f.whenSysConfigReady.reject(new Error(i))};document.body.appendChild(e)}}async connectedCallback(){await f.whenSysConfigReady.promise;g.debug("Creating new SysConfigModel()");this.impl=new n(o(this.el),window.ti.SysConfig.asyncCreateEnv,this.getGcTheme)}async disconnectedCallback(){await f.whenSysConfigReady.promise;if(this.impl){this.impl.dispose();this.impl=undefined}}get el(){return i(this)}static get watchers(){return{boardPath:["onScriptChanged"],partName:["onScriptChanged"],variant:["onScriptChanged"],package:["onScriptChanged"],scriptPath:["onScriptChanged"],sdkVersion:["onScriptChanged"],sdkId:["onScriptChanged"],metadataPath:["onScriptChanged"],deviceName:["onScriptChanged"],deviceId:["onScriptChanged"],otherFlags:["onScriptChanged"],theme:["onThemePropChanged"]}}};f.whenSysConfigReady=a.defer();class w extends h{constructor(t){super(t);this.parent=t;this.onScriptChangedEventHandler=t=>{this.remountTab(t.detail)}}updateActiveModel(t){if(this.activeSysConfigModel===t){return}if(this.activeSysConfigModel){this.activeSysConfigModel.removeEventListener("script-changed",this.onScriptChangedEventHandler)}this.activeSysConfigModel=t;if(this.activeSysConfigModel){this.activeSysConfigModel.addEventListener("script-changed",this.onScriptChangedEventHandler)}}async getActiveSysConfigEnv(){if(this.parent.modelId){this.updateActiveModel(document.querySelector(`gc-model-sysconfig#${this.parent.modelId}`));const t=await d.waitForModelReady(this.parent.modelId,5e3);if(t instanceof n){return a.timeout(t.scriptEnvironment,5e3,`timeout waiting for model id=${this.parent.modelId} to be ready.`)}throw new Error(`Model id=${this.parent.modelId} is not a gc-model-sysconfig instance.`)}const t=document.querySelectorAll("gc-model-sysconfig");const e=[];for(let i=0;i<t.length;i++){e.push(t[i].id)}if(e.length<=0){throw new Error(`Cannot find a gc-model-sysconfig to use for widget id=${this.element.id}`)}this.updateActiveModel(t[0]);const i=await a.timeout(Promise.all(e.map((t=>d.waitForModelReady(t)))),5e3,"Timeout waiting for all gc-model-sysconfig components to be ready.");const s=i.filter((t=>t instanceof n))[0];if(!s){throw new Error("Programmer error: gc-model-sysconfig did not register the correct type of instance.")}return a.timeout(s.scriptEnvironment,5e3,`timeout waiting for model id=${s.id} to be ready.`)}doComponentDidLoad(){if(this.element){const t=document.createElement("span");t.id="reactRoot";t.setAttribute("style","position: absolute; top: 0; bottom: 0; left: 0; right: 0");this.element.shadowRoot?.host?.appendChild(t);this.doRemountTab()}}doDisconnectedCallBack(){const{unmount:t}=window.ti.SysConfig;if(this.parent.unmountRoot){t(this.parent.unmountRoot)}this.parent.unmountRoot=null}doRender(){if(this.parent.unmountRoot){return s("slot",null)}if(this.parent.errorMessageToDisplay){return s("gc-widget-icon",{size:"m",id:"errorMessageIcon",icon:"alert:warning",appearance:"warn",tooltip:this.parent.errorMessageToDisplay})}return s("gc-widget-progress-spinner",null)}async doRemountTab(){try{if(!this.element){return}const t=await this.getActiveSysConfigEnv();this.remountTab({status:"success",scriptEnv:t})}catch(t){this.remountTab({status:"error",message:t.message||t.toString()})}}}const l=":host{overflow:auto;min-height:100px;min-width:100px}";let m=class{constructor(i){t(this,i);this.cssPropertyChanged=e(this,"css-property-changed",7);this.base=new class extends w{get sysconfigDeviceViewWidget(){return this.parent}remountTab(t){if(!this.element){return}if(this.sysconfigDeviceViewWidget.unmountRoot){window.ti.SysConfig.unmount(this.sysconfigDeviceViewWidget.unmountRoot);this.sysconfigDeviceViewWidget.unmountRoot=null}this.sysconfigDeviceViewWidget.errorMessageToDisplay=t.status==="error"?t.message:undefined;if(t.status==="success"){const e=document.querySelector(`gc-widget-sysconfig-device-view#${this.element.id} > span#reactRoot`);try{window.ti.SysConfig.mountDeviceView(e,t.scriptEnv);this.sysconfigDeviceViewWidget.unmountRoot=e}catch(t){this.sysconfigDeviceViewWidget.errorMessageToDisplay=`Failed to mount SysConfig 'device-view' tab: ${t.message||t.toString()}`}}}get element(){return this.sysconfigDeviceViewWidget.el}}(this);this._refresh=0;this.hidden=false}componentDidLoad(){this.base.doComponentDidLoad()}componentDidRender(){const t=this.el.querySelector(`gc-widget-sysconfig-device-view#${this.base.element.id} > span#reactRoot > span>div#DeviceViewWidget>div`);t.style.overflow="unset"}async onModelIdChanged(){this.base.doRemountTab()}disconnectedCallBack(){this.base.doDisconnectedCallBack()}render(){return this.base.doRender()}async setCSSProperty(t,e){e=e.trim();if(await this.getCSSProperty(t)!==e){this.el.style.setProperty(t,e);this.cssPropertyChanged.emit({name:t,value:e})}}async getCSSProperty(t){return getComputedStyle(this.el).getPropertyValue(t).trim()}async refresh(){this._refresh++}get el(){return i(this)}static get watchers(){return{modelId:["onModelIdChanged"]}}};m.style=l;const u=":host{overflow:hidden;min-height:100px;min-width:100px}";let p=class{constructor(i){t(this,i);this.cssPropertyChanged=e(this,"css-property-changed",7);this.base=new class extends w{get sysconfigViewWidget(){return this.parent}remountTab(t){if(!this.element){return}if(this.sysconfigViewWidget.unmountRoot){window.ti.SysConfig.unmount(this.sysconfigViewWidget.unmountRoot);this.sysconfigViewWidget.unmountRoot=null}this.sysconfigViewWidget.errorMessageToDisplay=t.status==="error"?t.message:undefined;if(t.status==="success"){const e=document.querySelector(`gc-widget-sysconfig-view#${this.element.id} > span#reactRoot`);try{window.ti.SysConfig.mountTab(e,t.scriptEnv,this.sysconfigViewWidget.tabName);this.sysconfigViewWidget.unmountRoot=e}catch(t){this.sysconfigViewWidget.errorMessageToDisplay=`Failed to mount SysConfig ${this.sysconfigViewWidget.tabName} tab: ${t.message||t.toString()}`}}}get element(){return this.sysconfigViewWidget.el}}(this);this.tabName="Software";this._refresh=0;this.hidden=false}async onTabChanged(){this.base.doRemountTab()}componentDidLoad(){this.base.doComponentDidLoad()}disconnectedCallBack(){this.base.doDisconnectedCallBack()}render(){return this.base.doRender()}async setCSSProperty(t,e){e=e.trim();if(await this.getCSSProperty(t)!==e){this.el.style.setProperty(t,e);this.cssPropertyChanged.emit({name:t,value:e})}}async getCSSProperty(t){return getComputedStyle(this.el).getPropertyValue(t).trim()}async refresh(){this._refresh++}get el(){return i(this)}static get watchers(){return{modelId:["onTabChanged"],tabName:["onTabChanged"]}}};p.style=u;export{f as gc_model_sysconfig,m as gc_widget_sysconfig_device_view,p as gc_widget_sysconfig_view};
//# sourceMappingURL=p-0d9d08a8.entry.js.map