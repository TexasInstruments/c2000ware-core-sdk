/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
#ifndef SIGNALSIGHT_HASH_H_
#define SIGNALSIGHT_HASH_H_
%
%let transferCommon;
%if (system.getProducts()[0].name.includes("C2000")) {
%    transferCommon = system.getScript("/utilities/transfer/transferCommon.js");
%} else { transferCommon = system.getScript("/transfer/transferCommon.js"); }
%
% var hashTables = system.modules[transferCommon.getTransferPath() + 'signalsight/hash/hashTable.js'];
% var hashElements = system.modules[transferCommon.getTransferPath() + 'signalsight/hash/hashElement.js'];
% let tableInstances = [];
%
% //Get all table instances
% if(hashTables){
    % for(let i = 0; i < hashTables.$instances.length; i++){
            % //hash table instances
            % tableInstances.push(hashTables.$instances[i])
    % }
% }
% if(tableInstances.length != 0){

//
//Includes
//
#include "board.h"
#include <stdio.h>
#include <stdbool.h>

%for(let i = 0; i < tableInstances.length; i++){
        % if(tableInstances[i].buildEnable){
#define SSHASH_HASH_TABLE_SELECTED HASH_TABLE_`tableInstances[i].$name`
                %break
        %}
% }
% }
% if(hashElements){
//
//Defines
//
% }
% //Loop through each hash table
% for(let i = 0; i < tableInstances.length; i++){
    % //Get all hash table elements for current instance
    % let currentHashElements = [];
    % if(hashElements){
        % for(let j = 0; j < hashElements.$instances.length; j++){
            % if(hashElements.$instances[j].hashTable == tableInstances[i].$name ){
                % currentHashElements.push(hashElements.$instances[j]);
            %}
        % }
        % if(currentHashElements.length != 0){
#if(SSHASH_HASH_TABLE_SELECTED == HASH_TABLE_`tableInstances[i].$name`)
     #define SSHASH_NUMBER_OF_VARIABLES `currentHashElements.length`
#endif //HASH_TABLE_`tableInstances[i].$name`
        % }
    % }
% }
% if(hashElements){

#define SSHASH_AMOUNT_OF_VARIABLE_TYPES 6

//
//Globals
//
extern const void* SSHASH_hash_table[SSHASH_NUMBER_OF_VARIABLES];

extern int16_t SSHASH_uint16_t_startIndex;
extern int16_t SSHASH_uint32_t_startIndex;
extern int16_t SSHASH_int16_t_startIndex;
extern int16_t SSHASH_int32_t_startIndex;
extern int16_t SSHASH_float_startIndex;
extern int16_t SSHASH_bool_startIndex;
% }

#endif /* SIGNALSIGHT_HASH_H_ */
