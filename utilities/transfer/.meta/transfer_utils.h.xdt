/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>


#define UINT32_BYTE_COUNT   4
#define INT32_BYTE_COUNT    4
#define UINT16_BYTE_COUNT   2
#define CHAR_BYTE_COUNT   1
#define INT16_BYTE_COUNT    2
#define FLOAT32_BYTE_COUNT  4
#define BOOL_BYTE_COUNT 1

void itoa(int32_t value, char *result);
void utoa(uint32_t value, char *result);
void ftoa(float value, char* result, int numDecimal);
void u16toBytes(uint16_t u16, uint16_t* byteArray);
void i16toBytes(int16_t i16, uint16_t* byteArray);
void u32toBytes(uint32_t u32, uint16_t* byteArray);
void i32toBytes(int32_t i32, uint16_t* byteArray);
void f32toBytes(float f32, uint16_t* byteArray);
uint32_t tenToPow(uint32_t pow);
void chartoUint16arr(char * strToWrite, uint16_t * chartoUint16_t, uint16_t writeLength);
